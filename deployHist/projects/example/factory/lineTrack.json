{
    "SPDX-License-Identifier": {
        "lines": [],
        "Licenses": [],
        "License": [],
        "lic": ""
    },
    "pragma solidity": {
        "lines": [
            3
        ],
        "range": [],
        "prags": [
            "=0.5.16"
        ],
        "pragma": ""
    },
    "function": {
        "lines": [
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            88,
            119,
            124,
            129,
            133,
            138,
            142,
            146,
            153,
            188,
            193,
            212,
            218,
            233,
            253,
            274,
            296,
            324,
            331,
            345,
            348,
            364,
            368,
            375,
            378,
            381,
            387,
            391,
            410,
            414
        ],
        "names": "uqdiv"
    },
    "library": {
        "lines": [
            374,
            386,
            407
        ],
        "names": [
            "SafeMath",
            "Math",
            "UQ112x112"
        ],
        "SafeMath": {
            "attributes": {},
            "address": "",
            "undeclared": "0"
        },
        "Math": {
            "attributes": {},
            "address": "",
            "undeclared": "0"
        },
        "UQ112x112": {
            "attributes": {},
            "address": "",
            "undeclared": "0"
        }
    },
    "contract": {
        "lines": [
            90,
            91,
            167,
            168,
            169,
            335
        ],
        "names": [
            "UniswapV2ERC20",
            "SafeMath",
            "UniswapV2Pair",
            "SafeMath",
            "UQ112x112",
            "NeFiFactory"
        ],
        "UniswapV2ERC20": {
            "address": "",
            "attributes": {
                "interface": [
                    "IUniswapV2ERC20"
                ]
            },
            "undeclared": "1"
        },
        "SafeMath": {
            "address": "",
            "attributes": {},
            "undeclared": "1",
            "constructor": {
                "attributes": [
                    ""
                ],
                "constVariables": [
                    ""
                ],
                "type": [
                    ""
                ],
                "variables": [],
                "deployerVars": {},
                "input": []
            }
        },
        "UniswapV2Pair": {
            "address": "",
            "attributes": {
                "contract": [
                    "UniswapV2ERC20"
                ],
                "interface": [
                    "IUniswapV2Pair"
                ]
            },
            "undeclared": "1"
        },
        "UQ112x112": {
            "address": "",
            "attributes": {},
            "undeclared": "1",
            "constructor": {
                "attributes": [
                    ""
                ],
                "constVariables": [
                    ""
                ],
                "type": [
                    ""
                ],
                "variables": [],
                "deployerVars": {},
                "input": []
            }
        },
        "NeFiFactory": {
            "address": "",
            "attributes": {
                "interface": [
                    "IUniswapV2Factory"
                ]
            },
            "undeclared": "1",
            "constructor": {
                "attributes": [
                    "address"
                ],
                "constVariables": [
                    "_feeToSetter"
                ],
                "type": [],
                "variables": [],
                "deployerVars": {},
                "input": []
            }
        }
    },
    "abstract contract": {
        "lines": [],
        "names": []
    },
    "interface": {
        "lines": [
            4,
            15,
            57,
            74,
            87
        ],
        "names": [
            "IUniswapV2Factory",
            "IUniswapV2Pair",
            "IUniswapV2ERC20",
            "IERC20",
            "IUniswapV2Callee"
        ],
        "IUniswapV2Factory": {
            "address": "",
            "attributes": {},
            "undeclared": "1"
        },
        "IUniswapV2Pair": {
            "address": "",
            "attributes": {},
            "undeclared": "1"
        },
        "IUniswapV2ERC20": {
            "address": "",
            "attributes": {},
            "undeclared": "1"
        },
        "IERC20": {
            "address": "",
            "attributes": {},
            "undeclared": "1"
        },
        "IUniswapV2Callee": {
            "address": "",
            "attributes": {},
            "undeclared": "1"
        }
    },
    "constructor": {
        "lines": [
            104,
            208,
            342
        ],
        "names": []
    },
    "variables": {
        "rndm": [
            [
                "bytes32 public constant INIT_CODE_PAIR_HASH ",
                " keccak256(abi.encodePacked(type(UniswapV2Pair).creationCode))"
            ],
            [
                "mapping(address ",
                "> mapping(address ",
                "> address)) public getPair"
            ],
            [
                "feeToSetter ",
                " _feeToSetter"
            ]
        ],
        "address": {
            "list": [
                "allPairs"
            ],
            "single": [
                "feeTo",
                "feeToSetter",
                "uint)",
                "uint)",
                "uint)"
            ]
        },
        "uint": {
            "list": [],
            "single": [
                "uint)"
            ]
        },
        "string": {
            "list": [],
            "single": []
        },
        "bool": {
            "list": [],
            "single": []
        },
        "bytes": {
            "list": [],
            "single": []
        }
    }
}